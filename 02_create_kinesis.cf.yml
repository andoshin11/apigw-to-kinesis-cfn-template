AWSTemplateFormatVersion: '2010-09-09'

Resources:
  LogBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: snapsnap-test-log-bucket
  FirstKinesisStream:
    Type: AWS::Kinesis::Stream
    Properties:
      Name: SnapsnapTestStream
      RetentionPeriodHours: 24
      ShardCount: 1
  FirstKinesisFirehose:
    Type: AWS::KinesisFirehose::DeliveryStream
    Properties:
      DeliveryStreamName: SnapsnapTestFirehose
      DeliveryStreamType: KinesisStreamAsSource
      KinesisStreamSourceConfiguration:
        KinesisStreamARN: !GetAtt FirstKinesisStream.Arn
        RoleARN: !GetAtt FirehoseS3FullAccessRole.Arn
      S3DestinationConfiguration:
        BucketARN: !GetAtt LogBucket.Arn
        CompressionFormat: "GZIP"
        BufferingHints:
          IntervalInSeconds: 60
          SizeInMBs: 1
        RoleARN: !GetAtt FirehoseS3FullAccessRole.Arn
  KinesisSamplePolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Action:
              - "kinesis:*"
            Resource: "*"
  FirehoseS3FullAccessPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Action:
              - "s3:AbortMultipartUpload"
              - "s3:GetBucketLocation"
              - "s3:GetObject"
              - "s3:ListBucket"
              - "s3:ListBucketMultipartUploads"
              - "s3:PutObject"
            Resource:
              - !GetAtt LogBucket.Arn
          - Effect: "Allow"
            Action:
              - "kinesis:DescribeStream"
              - "kinesis:GetShardIterator"
              - "kinesis:GetRecords"
            Resource:
              - !GetAtt FirstKinesisStream.Arn
  APIGatewayKinesisAccessRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: apiGateweayKinesisAccessRole
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - apigateway.amazonaws.com
            Action: "sts:AssumeRole"
      Path: "/"
      ManagedPolicyArns:
        - !Ref KinesisSamplePolicy
  FirehoseS3FullAccessRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: firehoseS3FullAccessRole
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - firehose.amazonaws.com
            Action: "sts:AssumeRole"
      ManagedPolicyArns:
        - !Ref FirehoseS3FullAccessPolicy
  KinesisProxy:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: KinesisProxy
  StreamsResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref KinesisProxy
      ParentId: !GetAtt KinesisProxy.RootResourceId
      PathPart: streams
  ListStreams:
    Type: AWS::ApiGateway::Method
    Properties:
      HttpMethod: "GET"
      ResourceId: !Ref StreamsResource
      RestApiId: !Ref KinesisProxy
      AuthorizationType: "NONE"
      MethodResponses:
        - StatusCode: "200"
          ResponseModels:
            "application/json": "Empty"
      Integration:
        Type: "AWS"
        Uri: "arn:aws:apigateway:ap-northeast-1:kinesis:action/ListStreams"
        IntegrationHttpMethod: "POST"
        Credentials: !GetAtt APIGatewayKinesisAccessRole.Arn
        RequestParameters:
          "integration.request.header.Content-Type": "'application/x-amz-json-1.1'"
        RequestTemplates:
          "application/json": "{}"
        IntegrationResponses:
          - StatusCode: "200"
  # Describe Stream
  StreamNameResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref KinesisProxy
      ParentId: !Ref StreamsResource
      PathPart: "{stream-name}"
  DescribeStream:
    Type: AWS::ApiGateway::Method
    Properties:
      HttpMethod: "GET"
      ResourceId: !Ref StreamNameResource
      RestApiId: !Ref KinesisProxy
      AuthorizationType: "NONE"
      MethodResponses:
        - StatusCode: "200"
          ResponseModels:
            "application/json": "Empty"
      Integration:
        Type: "AWS"
        Uri: "arn:aws:apigateway:ap-northeast-1:kinesis:action/DescribeStream"
        IntegrationHttpMethod: "POST"
        Credentials: !GetAtt APIGatewayKinesisAccessRole.Arn
        RequestParameters:
          "integration.request.header.Content-Type": "'application/x-amz-json-1.1'"
        RequestTemplates:
          "application/json": |
            {
              "StreamName": "$input.params('stream-name')"
            }
        IntegrationResponses:
          - StatusCode: "200"
  CreateStream:
    Type: AWS::ApiGateway::Method
    Properties:
      HttpMethod: "POST"
      ResourceId: !Ref StreamNameResource
      RestApiId: !Ref KinesisProxy
      AuthorizationType: "NONE"
      MethodResponses:
        - StatusCode: "200"
          ResponseModels:
            "application/json": "Empty"
      Integration:
        Type: "AWS"
        Uri: "arn:aws:apigateway:ap-northeast-1:kinesis:action/CreateStream"
        IntegrationHttpMethod: "POST"
        Credentials: !GetAtt APIGatewayKinesisAccessRole.Arn
        RequestParameters:
          "integration.request.header.Content-Type": "'application/x-amz-json-1.1'"
        RequestTemplates:
          "application/json": |
            {
              "StreamName": "$input.params('stream-name')",
              "ShardCount": #if($input.path('$.ShardCount') == '') 5 #else $input.path('$.ShardCount') #end
            }
        IntegrationResponses:
          - StatusCode: "200"
  DeleteStream:
    Type: AWS::ApiGateway::Method
    Properties:
      HttpMethod: "DELETE"
      ResourceId: !Ref StreamNameResource
      RestApiId: !Ref KinesisProxy
      AuthorizationType: "NONE"
      MethodResponses:
        - StatusCode: "200"
          ResponseModels:
            "application/json": "Empty"
      Integration:
        Type: "AWS"
        Uri: "arn:aws:apigateway:ap-northeast-1:kinesis:action/DeleteStream"
        IntegrationHttpMethod: "POST"
        Credentials: !GetAtt APIGatewayKinesisAccessRole.Arn
        RequestParameters:
          "integration.request.header.Content-Type": "'application/x-amz-json-1.1'"
        RequestTemplates:
          "application/json": |
            {
              "StreamName": "$input.params('stream-name')"
            }
        IntegrationResponses:
          - StatusCode: "200"

  # RecordResource
  RecordResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref KinesisProxy
      ParentId: !Ref StreamNameResource
      PathPart: record
  PutRecord:
    Type: AWS::ApiGateway::Method
    Properties:
      HttpMethod: "PUT"
      ResourceId: !Ref RecordResource
      RestApiId: !Ref KinesisProxy
      AuthorizationType: "NONE"
      MethodResponses:
        - StatusCode: "200"
          ResponseModels:
            "application/json": "Empty"
      Integration:
        Type: "AWS"
        Uri: "arn:aws:apigateway:ap-northeast-1:kinesis:action/PutRecord"
        IntegrationHttpMethod: "POST"
        Credentials: !GetAtt APIGatewayKinesisAccessRole.Arn
        RequestParameters:
          "integration.request.header.Content-Type": "'application/x-amz-json-1.1'"
        RequestTemplates:
          "application/json": |
            {
              "StreamName": "$input.params('stream-name')","Data": "$util.base64Encode($input.json('$.Data'))",
              "PartitionKey": "$input.path('$.PartitionKey')"
            }
        IntegrationResponses:
          - StatusCode: "200"
  # RecordsResource
  RecordsResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref KinesisProxy
      ParentId: !Ref StreamNameResource
      PathPart: records
  PutRecords:
    Type: AWS::ApiGateway::Method
    Properties:
      HttpMethod: "PUT"
      ResourceId: !Ref RecordsResource
      RestApiId: !Ref KinesisProxy
      AuthorizationType: "NONE"
      MethodResponses:
        - StatusCode: "200"
          ResponseModels:
            "application/json": "Empty"
      Integration:
        Type: "AWS"
        Uri: "arn:aws:apigateway:ap-northeast-1:kinesis:action/PutRecords"
        IntegrationHttpMethod: "POST"
        Credentials: !GetAtt APIGatewayKinesisAccessRole.Arn
        RequestParameters:
          "integration.request.header.Content-Type": "'application/x-amz-json-1.1'"
        RequestTemplates:
          "application/json": |
            {
              "StreamName": "$input.params('stream-name')",
              "Records": [
                #foreach($elm in $input.path('$.records'))
                  {
                    "Data": "$util.base64Encode($elm.data)",
                    "PartitionKey": "$elm.partition-key"
                  }#if($foreach.hasNext),#end
                #end
              ]
            }
        IntegrationResponses:
          - StatusCode: "200"
  GetRecords:
    Type: AWS::ApiGateway::Method
    Properties:
      HttpMethod: "GET"
      ResourceId: !Ref RecordsResource
      RestApiId: !Ref KinesisProxy
      AuthorizationType: "NONE"
      RequestParameters:
        "method.request.header.Shard-Iterator": true
      MethodResponses:
        - StatusCode: "200"
          ResponseModels:
            "application/json": "Empty"
      Integration:
        Type: "AWS"
        Uri: "arn:aws:apigateway:ap-northeast-1:kinesis:action/GetRecords"
        IntegrationHttpMethod: "POST"
        Credentials: !GetAtt APIGatewayKinesisAccessRole.Arn
        RequestParameters:
          "integration.request.header.Content-Type": "'application/x-amz-json-1.1'"
          "integration.request.header.Shard-Iterator": "method.request.header.Shard-Iterator"
        RequestTemplates:
          "application/json": |
            {
              "ShardIterator": "$input.params('Shard-Iterator')"
            }
        IntegrationResponses:
          - StatusCode: "200"
  # ShardIteratorResource
  ShardIteratorResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref KinesisProxy
      ParentId: !Ref StreamNameResource
      PathPart: sharditerator
  GetShardIterator:
    Type: AWS::ApiGateway::Method
    Properties:
      HttpMethod: "GET"
      ResourceId: !Ref ShardIteratorResource
      RestApiId: !Ref KinesisProxy
      AuthorizationType: "NONE"
      RequestParameters:
        "method.request.querystring.shard-id": true
      MethodResponses:
        - StatusCode: "200"
          ResponseModels:
            "application/json": "Empty"
      Integration:
        Type: "AWS"
        Uri: "arn:aws:apigateway:ap-northeast-1:kinesis:action/GetShardIterator"
        IntegrationHttpMethod: "POST"
        Credentials: !GetAtt APIGatewayKinesisAccessRole.Arn
        RequestParameters:
          "integration.request.header.Content-Type": "'application/x-amz-json-1.1'"
          "integration.request.querystring.shard-id": "method.request.querystring.shard-id"
        RequestTemplates:
          "application/json": |
            {
              "StreamName": "$input.params('stream-name')",
              "ShardIteratorType": "TRIM_HORIZON",
              "ShardId": "$input.params('shard-id')"
            }
        IntegrationResponses:
          - StatusCode: "200"
